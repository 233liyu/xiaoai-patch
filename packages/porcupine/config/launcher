#!/bin/sh

# This script will launch Porcupine (hotword detector) on infinite loop.
# Service can be stopped, same as pressing the MUTE button.

MIC="mico_record"

SENSITIVITY="0.6"
WORD=alexa
TIME=5
NOTIFY_SOUND=wakeup2
PORCUPINE_FOLDER=/usr/share/porcupine
SPEAK=tts_google
HA_STT_PROVIDER=stt.faster_whisper
STT_LANGUAGE=en
STT_RATE=8000
STT_BITRATE=16
STT_CHANNEL=1
STT_MAX_TIME=25
STT_REPEAT_MESSAGE=0
RECORDING_RATE=16000
RECORDING_CHANNEL=1
VOLUME_THRESHOLD=10
VOLUME_DURING_STT=10
SOX_SILENCE_ARGS="1 0.2 1% 0.5 1.2 1%"

CONFIG_FILE=/data/listener

# import config file if exists
[ -f "${CONFIG_FILE}" ] && . ${CONFIG_FILE}
[ -f /data/tts.conf ] && . /data/tts.conf

WAV_INPUT=/tmp/input.wav
WAV_STT=/tmp/stt.wav
DATA_STT=/tmp/stt.json
ERROR_LISTENER=0

cleanup(){ rm -f $WAV_INPUT $WAV_STT $DATA_STT; }

log(){
  echo "stt: $@" >> /dev/kmsg
  echo "`date +'%D %T'` $@" >> /tmp/stt.log
}

current_volume(){ amixer get mysoftvol | awk '$0~/%/{print $4}' | tr -d '[]%' | head -n1; }
set_volume(){
  let VOL=$1*255/100
  for SRC in mysoftvol bluetooth 'headphone volume'; do
    amixer set "$SRC" $VOL &>/dev/null &
  done
}

check_date(){
  YEAR=2024
  COUNT=0
  until [ "$COUNT" -ge 5 ]; do
    if [ "`date +%Y`" -ge "$YEAR" ]; then
      log "all good"
      break
    fi
    log "updating time - times $COUNT"
    ntpd -q -p pool.ntp.org
    sleep 4
    let COUNT=COUNT+1
  done
}

ha_refresh_token() {
  log "refreshing token"

  SPEAKER_IP=$(ip addr show wlan0 | grep 'inet ' | awk '{print $2}' | cut -d/ -f1)
  curl -s -f -d "grant_type=refresh_token&client_id=http://${SPEAKER_IP}&refresh_token=${HA_REFRESH_TOKEN}" \
       -o /tmp/ha_token.json ${HA_URL}/auth/token

  if [ "$?" -gt 0 ]; then
    log "refresh token error: $(cat /tmp/ha_token.json)"
    sleep 1
    miplay sound notify -w
    SILENT=1 MUTE_LED=1 /etc/init.d/listener stop
    exit 1
  fi

  HA_TOKEN=$(jq -r .access_token /tmp/ha_token.json)
  sed -i "s/^HA_TOKEN=.*/HA_TOKEN=${HA_TOKEN}/" ${CONFIG_FILE}
}

get_stt_settings(){
  #echo "start $(date)"
  cleanup
  curl -H "Authorization: Bearer ${HA_TOKEN}" \
       -o ${DATA_STT} -D ${DATA_STT}.hdr \
       --max-time ${STT_MAX_TIME} \
       -s -f ${HA_URL}/api/stt/${HA_STT_PROVIDER}

  if [ "$?" -gt 0 ]; then
    log "stt config error: $(cat ${DATA_STT})"
    if grep -q -E "HTTP/(1\.1|2) 401" ${DATA_STT}.hdr && [ -n "$HA_REFRESH_TOKEN" ]; then
      ha_refresh_token
      SILENT=1 MUTE_LED=1 /etc/init.d/listener reload
      exit 1
    fi
    sleep 1
    miplay sound notify -w
    SILENT=1 MUTE_LED=1 /etc/init.d/listener stop
    exit 1
  fi
  #echo "data $(date)"

  STT_CONFIG_RATE=$(jq -r '.sample_rates[0]' ${DATA_STT})
  STT_CONFIG_CHANNEL=$(jq -r '.channels[0]' ${DATA_STT})
  STT_CONFIG_BITRATE=$(jq -r '.bit_rates[0]' ${DATA_STT})
  STT_LANGUAGE_AVAILABLE=$(jq -r '.languages | contains(["'${STT_LANGUAGE}'"])' ${DATA_STT})
  STT_FORMAT=$(jq -r '.formats[0]' ${DATA_STT})
  STT_CODEC=$(jq -r '.codecs[0]' ${DATA_STT})

  if [ "$STT_RATE" -ne "$STT_CONFIG_RATE" ]; then
    log "stt rate invalid; setting from $STT_RATE to $STT_CONFIG_RATE"
    STT_RATE=${STT_CONFIG_RATE}
  fi
  if [ "$STT_CHANNEL" -ne "$STT_CONFIG_CHANNEL" ]; then
    log "stt channel invalid; setting from $STT_CHANNEL to $STT_CONFIG_CHANNEL"
    STT_CHANNEL=${STT_CONFIG_CHANNEL}
  fi
  if [ "$STT_BITRATE" -ne "$STT_CONFIG_BITRATE" ]; then
    log "stt bitrate invalid; setting from $STT_BITRATE to $STT_CONFIG_BITRATE"
    STT_BITRATE=${STT_CONFIG_BITRATE}
  fi

  if [ "${STT_LANGUAGE_AVAILABLE}" != "true" ] && [ "${HA_STT_PROVIDER}" != "cloud" ] && [ "${#STT_LANGUAGE}" -gt 2 ]; then
    log "stt language invalid for provider ${HA_STT_PROVIDER}; ${STT_LANGUAGE} truncating"
    STT_LANGUAGE=${STT_LANGUAGE:0:2}
  fi
  #echo "end $(date)"
}

which arecord &>/dev/null && {
  RECORD_COMMAND="arecord -N -D$MIC -d $TIME -f S16_LE -c $RECORDING_CHANNEL -r $RECORDING_RATE -"
}
which sox &>/dev/null && {
  log "using sox"
  RECORD_COMMAND="timeout ${TIME} rec -t alsa $MIC -b ${STT_BITRATE} -c ${RECORDING_CHANNEL} -r ${RECORDING_RATE} -e signed-integer -t wav - silence ${SOX_SILENCE_ARGS}"
}

# Set lower rate if cannot convert later
which ffmpeg &>/dev/null || RECORDING_RATE=8000

MODEL=$(uci -c /usr/share/mico get version.version.HARDWARE)

if [ "${MODEL}" = "LX06" ]; then
  amixer sset 'pdm dclk' 'pdm dclk 3.072m, support 8k/16k/32k/48k' &
  amixer sset 'HCIC shift gain from coeff' 'shift with -0x4'
  RECORDING_CHANNEL=8
fi

log "check date for valid TLS"
check_date
log "getting stt settings"
get_stt_settings
log "ready"
echo ready
cleanup

# clear mute and other LED
for NUM in 7 1 2 3; do
  /bin/shut_led ${NUM}
done

while true; do

# program lib model keyword sensitivity ALSA_INPUT
/usr/bin/porcupine /usr/lib/libpv_porcupine.so "$PORCUPINE_FOLDER/model.pv" "$PORCUPINE_FOLDER/keywords/${WORD}_raspberry-pi.ppn" $SENSITIVITY $MIC

if [ "$?" -gt 0 ]; then
  sleep 2
  ERROR_LISTENER=$((ERROR_LISTENER + 1))
  if [ "$ERROR_LISTENER" -ge 5 ]; then
    log "too many errors in porcupine, stopping listener"
    miplay sound notify -w
    SILENT=1 MUTE_LED=1 /etc/init.d/listener stop
    exit 1
  fi
  continue
fi

# Trigger wakeword activated event

log "activated"
ubus send wakeword '{"name": "'${WORD}'"}'

ERROR_LISTENER=0
SAVED_VOL=`current_volume`
# lower volume EXCEPT for notifications
if [ "$SAVED_VOL" -gt ${VOLUME_THRESHOLD} ]; then
  set_volume ${VOLUME_DURING_STT}
fi

/bin/show_led 1
miplay sound ${NOTIFY_SOUND}
sleep 0.15

# Do all at once:
# Start recording user response - tee to input.wav
# convert to PCM_S16_LE 1ch/8000 - tee to stt.wav
# send data chuncked without waiting

[ -f "${DATA_STT}" ] && rm -f ${DATA_STT}

#log "curl -H X-Speech-Content: format=${STT_FORMAT}; channel=${STT_CHANNEL}; codec=${STT_CODEC}; sample_rate=${STT_RATE}; bit_rate=${STT_BITRATE}; language=${STT_LANGUAGE}"
${RECORD_COMMAND} | tee ${WAV_INPUT} | \
ffmpeg -hide_banner -loglevel error -i - -f ${STT_FORMAT} -ac ${STT_CHANNEL} -ar ${STT_RATE} -y - | tee ${WAV_STT} | \
curl -H "X-Speech-Content: format=${STT_FORMAT}; channel=${STT_CHANNEL}; codec=${STT_CODEC}; sample_rate=${STT_RATE}; bit_rate=${STT_BITRATE}; language=${STT_LANGUAGE}" \
     -H "Authorization: Bearer ${HA_TOKEN}" \
     -H "Tranfer-Encoding: chunked" \
     -o ${DATA_STT} -D ${DATA_STT}.hdr \
     --max-time ${STT_MAX_TIME} \
     -XPOST -T - ${HA_URL}/api/stt/${HA_STT_PROVIDER}

# Start loading
/bin/show_led 2

cat ${DATA_STT}.hdr
cat ${DATA_STT}

# Show speaking LED
# /bin/show_led 3

[ "$(jq -r .result ${DATA_STT})" = "success" ] && STT_SUCCESS=1

# call Conversation.Process to execute action
if [ -n "${STT_SUCCESS}" ]; then
  # cleanup text before sending
  STT_TEXT=$(jq -r .text ${DATA_STT} | tr -d '.' | awk '{$1=$1;print}')
  log "$STT_TEXT"
  echo ""
  echo "> ${STT_TEXT}"
  if [ -z "${STT_TEXT}" ]; then
    log "empty text"
    # NOTE: if empty text received, there may be some error with recording or other.
    miplay sound notice
  else
    CONVERSATION_RESPONSE=$(curl \
      -H "Authorization: Bearer ${HA_TOKEN}" \
      -H "Content-Type: application/json" \
      -d "{\"language\": \"${STT_LANGUAGE}\", \"text\": \"${STT_TEXT}\"}" \
      -XPOST ${HA_URL}/api/conversation/process)
    if [ "$STT_REPEAT_MESSAGE" = 1 ]; then
      # repeat what the speaker heard (transcribed)
      ${SPEAK} "${STT_TEXT}"
      sleep 0.5
    fi
    TTS_TEXT=$(echo "${CONVERSATION_RESPONSE}" | jq -r .response.speech.plain.speech)
    ${SPEAK} "${TTS_TEXT}"
  fi
else
  log "error"
  ${SPEAK} error
fi

# last animation fadeout and shut LEDs
/bin/show_led 11
for NUM in 1 2 3; do
  /bin/shut_led ${NUM}
done

# restore volume
set_volume $SAVED_VOL

done
# end while
