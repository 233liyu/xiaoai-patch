#!/bin/sh

# This script will launch Porcupine (hotword detector) on infinite loop.
# Service can be stopped, same as pressing the MUTE button.

MIC="mico_record"

SENSITIVITY="0.6"
WORD=alexa
TIME=5
NOTIFY_SOUND=/usr/share/sound/wakeup2.mp3
PORCUPINE_FOLDER=/usr/share/porcupine
SPEAK=tts_google
LANGUAGE=en

# import config file if exists
[ -f /data/listener ] && . /data/listener
[ -f /data/tts.conf ] && . /data/tts.conf

WAV_INPUT=/tmp/input.wav
WAV_STT=/tmp/stt.wav
DATA_STT=/tmp/stt.json
RATE=16000
CHANNEL=1

# Set lower rate if cannot convert later
which ffmpeg &>/dev/null || RATE=8000

MODEL=$(uci -c /usr/share/mico get version.version.HARDWARE)

if [ "${MODEL}" = "LX06" ]; then
  amixer sset 'pdm dclk' 'pdm dclk 3.072m, support 8k/16k/32k/48k' &
  amixer sset 'HCIC shift gain from coeff' 'shift with -0x4'
  CHANNEL=8
fi

rm -f $WAV_INPUT $WAV_STT $DATA_STT

while true; do

# program lib model keyword sensitivity ALSA_INPUT
/usr/bin/porcupine /usr/lib/libpv_porcupine.so $PORCUPINE_FOLDER/model.pv $PORCUPINE_FOLDER/keywords/${WORD}_raspberry-pi.ppn $SENSITIVITY $MIC

if [ "$?" -gt 0 ]; then
  sleep 1
  continue
fi

/bin/show_led 1
#aplay -Dnotify $NOTIFY_SOUND &>/dev/null &
mpg123 -a notify -q $NOTIFY_SOUND &>/dev/null &

# Do all at once:
# Start recording user response - tee to input.wav
# convert to PCM_S16_LE 1ch/8000 - tee to stt.wav
# send data chuncked without waiting

arecord -N -D$MIC -d $TIME -f S16_LE -c $CHANNEL -r $RATE - | tee ${WAV_INPUT} | \
ffmpeg -hide_banner -loglevel error -i - -f wav -ac 1 -ar 8000 -y - | tee ${WAV_STT} | \
curl -H "X-Speech-Content: format=wav; channel=1; codec=pcm; sample_rate=8000; bit_rate=16; language=${LANGUAGE}" \
     -H "Authorization: Bearer ${HA_TOKEN}" \
     -H "Tranfer-Encoding: chunked" \
     -o ${DATA_STT} -D ${DATA_STT}.hdr \
     -XPOST -T - ${HA_URL}/api/stt/${HA_STT_PROVIDER}

# Start loading
/bin/show_led 2

cat ${DATA_STT}.hdr
cat ${DATA_STT}

# Show speaking LED
# /bin/show_led 3

if [ "$(jq -r .result ${DATA_STT})" = "success" ]; then
  ${SPEAK} $(jq .text ${DATA_STT})
else
  ${SPEAK} error
fi

# last animation fadeout and shut LEDs
/bin/show_led 11
for NUM in 1 2 3; do
  /bin/shut_led ${NUM}
done

done
# end while
