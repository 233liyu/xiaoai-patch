#!/bin/sh

# return 0-100% (real value is 0-255)
current_volume(){ amixer get mysoftvol | awk '$0~/%/{print $4}' | tr -d '[]%' | head -n1; }
MODEL=$(uci -c /usr/share/mico get version.version.HARDWARE)

if [ "$1" = "up" ]; then
  VOL="3%+"
  [ "$MODEL" = "LX01" ] && VOL="2%+"
elif [ "$1" = "down" ]; then
  VOL="4%-"
  [ "$MODEL" = "LX01" ] && VOL="2%-"
elif [ "$1" = "color" ]; then
  VOL=""
  [ "$2" = "-q" ] && SILENT=1
elif [ "$1" = "get" ]; then
  echo `current_volume`
  return
elif [ ! -z "$1" ] && echo "$1" | grep -Eq "^[-+][0-9]{1,2}$"; then
  let VOL=`current_volume`${1:0:1}${1:1}
  let VOL=VOL*255/100
  #echo $VOL
  [ "$VOL" -lt 0 ] && VOL=0
  [ "$VOL" -gt 255 ] && VOL=255
elif [ ! -z "$1" ] && [ "$1" -ge 0 ] 2>/dev/null && [ "$1" -le 100 ]; then
  VOL=$1
  let VOL=VOL*255/100
else
  echo "Usage: $0 [color|get|up|down|<+/- optional> NUMBER]"
  return
fi

if [ -n "$VOL" ] ; then
  for SRC in bluetooth mysoftvol notifyvol 'headphone volume'; do
    amixer set "$SRC" $VOL &>/dev/null &
  done
fi

[ "$SILENT" != "1" ] && miplay sound volume &
[ "$MUTE_LED" = "1" ] && return

# SHOW VOLUME LED
CURVOL=`current_volume`
if [ "$CURVOL" -ge 0 ] && [ "$CURVOL" -le 100 ]; then

  COLOR="0x903000" # HEX BGR
  BLACK="0x0"

  case "${MODEL}" in
    LX06 | L06A)
      LEDI2C=0
      LEDID="0-003a"
      (lsmod | grep -q et6037) && LEDID="0-0023"
      LEDMAX=17
      # starts from play button
      LEDSEQ="$(seq 10 17) $(seq 0 9)"
      ;;
    L09A | L09B)
      LEDI2C=0
      LEDID="0-003b"
      LEDMAX=23
      LEDSEQ="$(seq 12 23) $(seq 0 11)"
      ;;
    LX01 | LX05)
      LEDMAX=0  # 1 but needed
      LEDSYS=/proc/ws2812/rgb0
      LEDSEQ=0
      COLOR="48 144" # HACK LEDSEQ+COLOR RGB
      BLACK="0 0"    # HACK LEDMAX+BLACK
      ;;
    *)
      exit 0
      ;;
  esac

  [ -z "${LEDSYS}" ] && LEDSYS=/sys/devices/i2c-${LEDI2C}/${LEDID}/led_rgb

  let AMOUNT=1+CURVOL*LEDMAX/100

  for LED in ${LEDSEQ}; do
    [ "$AMOUNT" -le 0 ] && COLOR="${BLACK}" # reset to black
    echo ${LED} ${COLOR} > ${LEDSYS}
    let AMOUNT=AMOUNT-1
  done

  # wait led
  CURRENT=$(cut -d'.' -f1 /proc/uptime)
  TMPWAIT=/tmp/wait_led
  WAIT_TIME=5

  let AMOUNT=CURRENT+WAIT_TIME
  echo ${AMOUNT} > ${TMPWAIT}

  # wait in background, only last execution counts
  ( sleep $WAIT_TIME; \
    if [ -f "$TMPWAIT" ] && [ "$(cat ${TMPWAIT} 2>/dev/null)" -eq "$(cut -d'.' -f1 /proc/uptime)" ]; then \
    rm ${TMPWAIT} &>/dev/null; \
    for LED in $(seq 0 $LEDMAX); do echo ${LED} ${BLACK} > ${LEDSYS}; done \
    fi \
  ) &
fi
